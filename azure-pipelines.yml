# ASP.NET
# Build and test ASP.NET projects.
# Add steps that publish symbols, save build artifacts, deploy, and more:
# https://docs.microsoft.com/azure/devops/pipelines/apps/aspnet/build-aspnet-4

trigger:
- main

pool:
  vmImage: 'windows-latest'

variables:
  solution: '**/*.sln'
  buildPlatform: 'Any CPU'
  buildConfiguration: 'Release'
  api: 'https://md84-timcoapi.azurewebsites.net'

steps:
#- task: NuGetToolInstaller@1

# - task: NuGetCommand@2
#   inputs:
#     restoreSolution: '$(solution)'

- task: DotNetCoreCLI@2
  inputs:
    command: 'restore'
    projects: '$(solution)'
    feedsToUse: 'select'

# - task: VSBuild@1
#   displayName: 'Build API Project'
#   inputs:
#     solution: 'TRMApi/TRMApi.csproj'
#     msbuildArgs: '/p:DeployOnBuild=true /p:WebPublishMethod=Package /p:PackageAsSingleFile=true /p:SkipInvalidConfigurations=true /p:PackageLocation="$(build.artifactStagingDirectory)"'
#     platform: '$(buildPlatform)'
#     configuration: '$(buildConfiguration)'

- task: DotNetCoreCLI@2
  inputs:
    command: 'publish'
    publishWebProjects: true
    arguments: '-r linux-x64 --output $(Build.ArtifactStagingDirectory)'

- task: PublishBuildArtifacts@1
  displayName: 'Publish API'
  inputs:
    PathtoPublish: '$(Build.ArtifactStagingDirectory)'
    ArtifactName: 'ApiDrop'
    publishLocation: 'Container'

- task: DeleteFiles@1
  displayName: 'Delete API files'
  inputs:
    SourceFolder: '$(Build.ArtifactStagingDirectory)'
    Contents: '**'

- task: VSBuild@1
  displayName: 'Build SQL Project'
  inputs:
    solution: 'TRMData/TRMData.sqlproj'
    msbuildArgs: '/p:OutDir="$(build.artifactStagingDirectory)\\" /property:DSP="Microsoft.Data.Tools.Schema.Sql.SqlAzureV12DatabaseSchemaProvider"'
    platform: '$(buildPlatform)'
    configuration: '$(buildConfiguration)'
    
- task: PublishBuildArtifacts@1
  displayName: 'Publish SQL'
  inputs:
    PathtoPublish: '$(Build.ArtifactStagingDirectory)'
    ArtifactName: 'SqlDrop'
    publishLocation: 'Container'

- task: DeleteFiles@1
  displayName: 'Delete SQL files'
  inputs:
    SourceFolder: '$(Build.ArtifactStagingDirectory)'
    Contents: '**'

- task: DotNetCoreCLI@2
  displayName: 'Build WPF Project'
  inputs:
    command: 'publish'
    publishWebProjects: false
    projects: 'TRMDesktopUI/TRMDesktopUI.csproj'
    arguments: '-p:PublishSingleFile=true --runtime win-x64 --self-contained true --output $(Build.ArtifactStagingDirectory) -c Release'
    zipAfterPublish: false

- task: replacetokens@5
  displayName: 'Replace tokens in json'
  inputs:
    rootDirectory: '$(Build.ArtifactStagingDirectory)'
    targetFiles: '**/*.json'
    encoding: 'auto'
    tokenPattern: 'default'
    writeBOM: true
    actionOnMissing: 'warn'
    keepToken: false
    actionOnNoFiles: 'continue'
    enableTransforms: false
    enableRecursion: false
    useLegacyPattern: false
    enableTelemetry: true

- task: PublishBuildArtifacts@1
  displayName: 'Publish WPF'
  inputs:
    PathtoPublish: '$(Build.ArtifactStagingDirectory)'
    ArtifactName: 'WpfDrop'
    publishLocation: 'Container'

- task: DeleteFiles@1
  displayName: 'Delete WPF files'
  inputs:
    SourceFolder: '$(Build.ArtifactStagingDirectory)'
    Contents: '**'

- task: CmdLine@2
  inputs:
    script: |
      dotnet tool install --global dotnet-ef
      dotnet ef migrations script -i -o $(Build.ArtifactStagingDirectory)/migrate.sql -p TRMApi/TRMApi.csproj
      echo Hello world

- task: PublishBuildArtifacts@1
  displayName: 'Publish AuthDB Script'
  inputs:
    PathtoPublish: '$(Build.ArtifactStagingDirectory)'
    ArtifactName: 'AuthDBDrop'
    publishLocation: 'Container'

# - task: VSTest@2
#   inputs:
#     platform: '$(buildPlatform)'
#     configuration: '$(buildConfiguration)'


